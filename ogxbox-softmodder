#!/usr/bin/env bash

# DESCRIPTION ------------------------------------------------------------------
#
# This script is a Bash version of Rocky5's Xbox-Softmodding-Tool batch scripts.
# See: https://github.com/Rocky5/Xbox-Softmodding-Tool
#
# NOTES:
# - Scripts inside 'App Sources' is not ported.
# - Files listed below has different hash compared to Windows generated one
#   due to use of different archiver and operating system's quirks.
#   - Xbox Softmodding Tool.zip : different archiver
#   - xboxdash.rar              : different archiver
#   - nkp settings.rar          : different archiver
#   - nkpatcher.rar             : different archiver
#   - Files.rar                 : different archiver
#   - UDDAE-C.zip               : different archiver
#   - Installation Guide.htm    : 7z (?) remove CR line endings
# - There are some file operations errors due to missing files or directories.
#
# CHANGELOG --------------------------------------------------------------------
#
# Sahri Riza Umami
#   v0.1 - 2019/07/16 18:24:18
#        - Initial release
#   v0.2 - 2021/02/28 10:28:04
#        - Synced to upstream v1.1.8
#        - Replace zip with 7z
#
# LICENSE ----------------------------------------------------------------------
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# ------------------------------------------------------------------------------
#
# VARIABLES --------------------------------------------------------------------

# Get the script's directory.
if [[ ${BASH_SOURCE[0]%/*} == '.' ]]; then
  OGXSMDIR=$(cd "${BASH_SOURCE[0]%/*}" >/dev/null 2>&1 && pwd)
else
  OGXSMDIR=$(pwd)
fi
# https://github.com/XboxDev/extract-xiso
EXISO='Other/Tools/extract-xiso'
FILESRAR="$OGXSMDIR/C Partition/Files.rar"
PREBUILD='N'
SRCDIR='Extras Disc'
# TMPDIR="$(mktemp -d)"
UDDAE='Extras Disc/Softmod/dashboards/msdash/other/UDDAE-C.zip'
XISONAME='Xbox Softmodding Tool Extras Disc.iso'
ZIPNAME='Xbox Softmodding Tool.zip'
# Pre-Build files
XBSMKIT='https://drive.google.com/drive/folders/0BzRN8P835YijRU94cVNNWFA1Z28?usp=sharing'
INSTVAR='https://drive.google.com/drive/folders/1GO8e61Urz0Ck8110A5C5X0qxnGpLjTI8?usp=sharing'
EXTRAS='https://drive.google.com/drive/folders/1xTpK-VoZX_uzyztk3zdnDaOdEcfOqPJb?usp=sharing'
XBSMTZIP='https://drive.google.com/file/d/1_7Ra-2cKSYBjT1pVWuCRTHvDGYuxKhKk/view?usp=sharing'

# FUNCTIONS --------------------------------------------------------------------

mssg(){ printf ':: %s\n' "$@"; }
# Print text in brown
prnt_brwn(){ printf '\e[33m:: %s\n\e[m' "$@"; }
# Print text in bold brown
prnt_bbrwn(){ printf '\e[1;33m:: %s\n\e[m' "$@"; }
# Print text in green
prnt_grn(){ printf '\e[32m:: %s\n\e[m' "$@"; }
# Print text in bold green
prnt_bgrn(){ printf '\e[1;32m:: %s\n\e[m' "$@"; }

# Build Files.rar.bat
# nkpatcher exploit
build_files_rar() {
  prnt_bgrn 'Build Files.rar'
  rm -f Files.rar
  rar a -inul -ep1 -r -x*.db -x"*empty" 'nkpatcher.rar' 'C Partition/nkpatcher'
  rar a -inul -ep1 -r -x*.db -x"*empty" 'xboxdash.rar' 'C Partition/xboxdash/'*
  rar a -inul -ep1 -r -x*.db -x"*empty" 'nkp settings.rar' 'Save Folder/nkpatcher settings'
  rar a -inul -ep1 -df Files.rar {xboxdash,nkpatcher,'nkp settings'}.rar
}

continue_or_get_prebuild() {
  if [[ $PREBUILD == 'Y' ]]; then
    ${1,,}
  else
    prnt_bbrwn 'This is intended for people that know what they are doing.'
    prnt_brwn 'If you do not, please hit enter to be taken' \
              'to the Pre-Build versions of the files.'
    mssg 'Continue? (yY[nN])'
    read -rp ':: ' CHOICE
    case "$CHOICE" in
      y|Y)
        ${1,,}
        PREBUILD='Y'
      ;;
      *)
        for LAUNCHER in sensible-browser xdg-open gnome-open; do
          if command -v "$LAUNCHER" &>/dev/null ; then
            "$LAUNCHER" "$2" &> /dev/null &
            exit
          fi
        done
      ;;
    esac
  fi
}

# Game saves exploit
copy_saves() {
  mkdir -p 'Other/tmp/softmod files/'{21585554/000000000000,4d530017,4541000d,SC-{NTSC,PAL}/5553000c,TH4-{NTSC,PAL}/41560017}
  cp -r 'Save Folder'/{'softmod files',*.{xbe,xbx}} 'Other/tmp/softmod files/21585554/000000000000'
  mv Files.rar 'Other/tmp/softmod files/21585554/000000000000/softmod files/'
  cp -r 'Other/Game Saves/Softmod/'* 'Other/tmp/softmod files/21585554/'
  cp -r 'Other/Game Saves/Extracted/'{MA/UDATA/4d530017,007/UDATA/4541000d} 'Other/tmp/softmod files'
  cp -r 'Other/Game Saves/Extracted/SC-NTSC/UDATA/5553000c' 'Other/tmp/softmod files/SC-NTSC'
  cp -r 'Other/Game Saves/Extracted/SC-PAL/UDATA/5553000c' 'Other/tmp/softmod files/SC-PAL'
  cp -r 'Other/Game Saves/Extracted/TH4-NTSC/UDATA/41560017' 'Other/tmp/softmod files/TH4-NTSC'
  cp -r 'Other/Game Saves/Extracted/TH4-PAL/UDATA/41560017' 'Other/tmp/softmod files/TH4-PAL'
  cp 'Other/Game Saves/BFM/'* Other/tmp
}

# Build save files for Xbox.
build_disc_save() {
  prnt_bgrn 'Build Disc Save'
  [[ ! -f "$FILESRAR" ]] && build_files_rar
  # Build Softmod Save
  rm -rf 'Extras Disc/Softmod/softmod files/'*
  copy_saves
  cp 'Save Folder/softmod files/UX.xbe' Other/tmp/unleashx.xbe
  7z a -y -bso0 -bsp0 '-xr!*.db' "Extras Disc/Softmod/softmod files/$ZIPNAME" ./Other/tmp/*
  rm -r Other/tmp
}

# Build HDD Save.bat
# Build save files for Xbox.
build_hdd_save() {
  prnt_bgrn 'Build HDD Save'
  [[ ! -f Files.rar ]] && build_files_rar
  rm -rf '../Test Build/UDATA'
  mkdir -p '../Test Build/UDATA/21585554/000000000000'
  cp -r 'Save Folder'/{'softmod files',*.{xbe,xbx}} '../Test Build/UDATA/21585554/000000000000'
  mv Files.rar '../Test Build/UDATA/21585554/000000000000/softmod files'
  cp -r 'Other/Game Saves/Softmod/'* '../Test Build/UDATA/21585554'
  if command -v xdg-open &>/dev/null ; then
    xdg-open '../Test Build/UDATA/21585554/000000000000'
  else
    ls -lah --color '../Test Build/UDATA/21585554/000000000000'
  fi
}

# Build Installer Variants.bat
# Build save files for Xbox.
build_installer_variants() {
  prnt_bgrn 'Build Installer Variants'
  [[ ! -f "$FILESRAR" ]] && build_files_rar
  mkdir -p Other/tmp
  copy_saves
  # Linux is case sensitive.
  mv 'Other/tmp/'{'softmod files','Softmod Files'}
  for up in Update Upgrade; do
    cp 'Save Folder/softmod files/UX.xbe' "Installer Variants/Quick $up/Quick $up/unleashx.xbe"
    cp Other/tmp/{boot.cfg,default.xbe,NoVC.bin} "Installer Variants/Quick $up/Quick $up/"
    cp -r 'Other/tmp/Softmod Files/' "Installer Variants/Quick $up/Quick $up"
    cp -r 'Other/tmp/Softmod Files/21585554/000000000000/softmod files/skin files' "Installer Variants/Quick $up/Quick $up/skins/skin files/"
  done
  rm -r 'Installer Variants/Quick Update/Quick Update/Softmod Files/'{4d530017,4541000d,SC-NTSC,SC-PAL,TH4-NTSC,TH4-PAL}
  cp 'Save Folder/softmod files/UX.xbe' 'Installer Variants/XBHDM Build/C/installer/unleashx.xbe'
  cp -r 'Other/tmp/Softmod Files' 'Installer Variants/XBHDM Build/C/installer'
  cp -r 'Other/tmp/Softmod Files/21585554/000000000000/softmod files/skin files' 'Installer Variants/XBHDM Build/C/installer/skins/skin files'

  7z a -y -bso0 -bsp0 '-xr!*.db' 'Quick Update.zip' './Installer Variants/Quick Update/'*
  7z a -y -bso0 -bsp0 '-xr!*.db' 'Quick Upgrade.zip' './Installer Variants/Quick Upgrade/*'
  7z a -y -bso0 -bsp0 '-xr!*.db' 'XBHDM Build.zip' './Installer Variants/XBHDM Build/'
  rm -r 'Installer Variants/Quick Update/Quick Update/'{skins/'skin files','Softmod Files',unleashx.xbe,default.xbe,boot.cfg,NoVC.bin}
  rm -r 'Installer Variants/Quick Upgrade/Quick Upgrade/'{skins/'skin files','Softmod Files',unleashx.xbe,default.xbe,boot.cfg,NoVC.bin}
  rm -r 'Installer Variants/XBHDM Build/C/installer/'{skins/'skin files','Softmod Files',unleashx.xbe}
  cd 'Utilites/Xbox/Attacher, Detacher' || exit
  if [[ ! -f 'Extras Disc Attacher.zip' ]]; then
    7z a -y -bso0 -bsp0 '-xr!*.db' '../Extras Disc Attacher.zip' "./${XISONAME%.*}"
    7z a -y -bso0 -bsp0 '-xr!*.db' '../Extras Disc Attacher.zip' './Detacher'
  fi

  cd "$OGXSMDIR" || exit

  rm -rf Other/{tmp,'Game Saves/BFM/Softmod Files'}
}

# Build Softmod zip.bat
# Build Release build.
build_softmod_zip() {
  prnt_bgrn 'Build Softmod zip'
  rm -f "$ZIPNAME"  Files.rar
  build_files_rar
  # Build Softmod Save.zip
  mkdir -p tmp/{'Softmod Package','Installation Guide',UDATA/21585554/000000000000}
  cp -r 'Save Folder'/{'softmod files',*.{xbe,xbx}} tmp/UDATA/21585554/000000000000
  cp -r 'Other/Game Saves/Softmod/'* tmp/UDATA/21585554/
  cp 'Other/Game Saves/Zipped/'*.zip 'tmp/Softmod Package'
  cp -r 'Documents/Installation Guide' tmp
  mv Files.rar 'tmp/UDATA/21585554/000000000000/softmod files'
  7z a -y -bso0 -bsp0 '-xr!*.db' 'tmp/Softmod Package/Softmod Save.zip' ./tmp/UDATA
  # Build Xbox Softmodding Tool.zip
  cp Documents/ReadMe.url tmp/
  7z a -y -bso0 -bsp0 '-xr!*.db' "$ZIPNAME" ./tmp/{'Installation Guide','Softmod Package',ReadMe.url}
  7z a -y -bso0 -bsp0 '-xr!*.db' "$UDDAE" './Installer Variants/UDDAE/resoftmod dash'
  7z a -y -bso0 -bsp0 '-xr!*.db' "$ZIPNAME" Changes.txt
  7z a -y -bso0 -bsp0 '-xr!*.db' "$ZIPNAME" Documents/{Troubleshooting.txt,'How to run the exploit save.txt'}
  7z a -y -bso0 -bsp0 '-xr!*.db' "$ZIPNAME" Utilites/PC/{'Open FTP Window.bat','OpenDash Dualboot.Settings'}
  rm -r tmp
}

# Build Test XISO.bat
build_test_xiso() {
  prnt_bgrn 'Build test XISO'
  mssg 'About to create an Xbox test ISO.'
  mssg "Source Directory: $SRCDIR"
  mssg "Output ISO Name : $XISONAME"
  build_disc_save
  # NOTE: Upstream bug.
  #mv "$SRCDIR/Softmod/Other" Other
  $EXISO -qc "$SRCDIR" "$XISONAME"
  # NOTE: Upstream bug.
  # mv: cannot stat 'Extras Disc/Softmod/Other': No such file or directory
  # mv: cannot stat 'Other/Other': No such file or directory
  #mv "Other/Other" "$SRCDIR/Softmod"
  #rm -rf "$SRCDIR/Softmod/softmod files/Softmod Files"
}

# Build XISO.bat
build_xiso() {
  prnt_bgrn 'Build XISO'
  mssg 'About to create an Xbox ISO.'
  mssg "Source Directory: $SRCDIR"
  mssg "Output ISO Name : $XISONAME"
  build_disc_save
  $EXISO -qc "$SRCDIR" "$XISONAME"
  # NOTE: Upstream bug. There is no 'Softmod Files'.
  #rm -rf "$SRCDIR/Softmod/Softmod Files/Softmod Files"
}

# Build XISO Application.bat
build_xiso_application() {
  prnt_bgrn 'Build XISO application'
  mssg 'About to create an Xbox ISO application.'
  mssg "Source Directory: $SRCDIR"
  mssg "Output ISO Name : ${XISONAME%.*}/$XISONAME"
  build_disc_save
  cp -r "Utilites/Xbox/Attacher, Detacher/${XISONAME%.*}" "${XISONAME%.*}"
  $EXISO -qc "$SRCDIR" "${XISONAME%.*}/$XISONAME"
  # NOTE: Upstream bug. There is no 'Softmod Files'.
  rm -rf "$SRCDIR/Softmod/softmod files/Softmod Files"
}

print_help() {
  printf '%s\n' "
  ${0##*/} is a softmodding tool for the first generation Xbox.

  This script is a Bash version of Rocky5's Xbox-Softmodding-Tool.
  See: https://github.com/Rocky5/Xbox-Softmodding-Tool

  Usage: ${0##*/} OPTION

  OPTION:
    -dsv  --disc-save           Build save files for Xbox
    -hdds --hdd-save            Build save files on disk
    -rar  --files-rar           Create nkpatcher Files.rar
    -rls  --release             Build release
    -rmdb --rm-thumbdb          Remove Thumb.dbs and desktop.inis
    -skin --update-skin         Update skin version
    -test --test-xiso           Build test $XISONAME
    -var  --installer-variants  Create installer variants
    -xapp --xiso-app            Build ${XISONAME%.*}
    -xiso --xiso                Build $XISONAME
    -zip  --softmod-zip         Create $ZIPNAME

  Most of the time, all you need is just build a release:
    ${0##*/} -rls
  or
    ${0##*/} --release
"
}

# Remove All Thumb.db.bat
remove_all_thumbdb() {
  prnt_bgrn 'Remove all Thumbs.db and desktop.ini files'
  find . -type f \( -iname 'Thumbs.db' -o -iname 'desktop.ini' \) -exec rm -v '{}' \;
}

# Update Skin Version Number.bat
update_skin_version_number() {
  prnt_bgrn 'Update Skin Version Number'
  mapfile -t VERSION < 'Other/Build Version.txt'
  # Build Version.txt contain carriage return (\r).
  OLDVER=${VERSION//$'\r'}
  OLDVER=${OLDVER##*=}

  read -rp ':: Enter new version number: ' NEWVERSION
  if [[ -z "$NEWVERSION" ]]; then
    mssg "Current Build Version = $OLDVER"
    mssg "Using $OLDVER as the version number."
  else
    prnt_grn "Using $NEWVERSION as the version number."
    mapfile < "Other/Build Version.txt"
    echo "${MAPFILE[@]/$OLDVER/$NEWVERSION}" > 'Build Version.txt'
    # NOTE: Upstream bug. There is no "Xbox Softmodding Tool v$OLDVER" to replace.
    #mapfile < README.md
    #echo "${MAPFILE[@]/Xbox Softmodding Tool v$OLDVER/Xbox Softmodding Tool v$NEWVERSION}" > README.md
    mapfile < README.md
    echo "${MAPFILE[@]/Current release v$OLDVER/Current release v$NEWVERSION}" > README.md
    mapfile < Changes.txt
    echo "${MAPFILE[@]/Xbox Softmodding Tool v$OLDVER/Xbox Softmodding Tool v$NEWVERSION}" > Changes.txt

    while IFS= read -r -d '' skin; do
      mapfile < "$skin"
      echo "${MAPFILE[@]/<Version>$OLDVER<\/Version>/<Version>$NEWVERSION<\/Version>}" > "$skin"
    done < <(find . -type f -iname 'skin.xml' -print0)

    for skinwe in 'Save Folder/nkpatcher settings/skins/Dashboard'/skin{wide,evox}.xml; do
      mapfile < "$skinwe"
      echo "${MAPFILE[@]/<Version>$OLDVER<\/Version>/<Version>$NEWVERSION<\/Version>}" > "$skinwe"
    done
  fi

  7z a -y -bso0 -bsp0 '-xr!*.db' "$UDDAE" './Installer Variants/UDDAE/resoftmod dash'
}

# Build Release.bat
build_release() {
  prnt_bgrn 'Build Release'

  mkdir -p ../Release/{'Installer Variants',Utilites,Documents,'Extras Disc'/{Documents,Extras}}

  update_skin_version_number
  remove_all_thumbdb
  build_softmod_zip
  build_installer_variants
  build_xiso
  # Xbox Softmodding Tool
  mv "$ZIPNAME" ../Release
  cp Changes.txt ../Release
  cp Documents/ReadMe.url '../Release/Read Me.url'
  # NOTE: Upstream bug.
  # - no 'Free FTP Programs.txt'
  # - batch script failed to copy 'How to run the exploit save.txt'
  cp 'Documents/'{'Free FTP Programs.txt','How to run the exploit save.txt',Troubleshooting.txt} ../Release/Documents 2>/dev/null
  cp Other/Graphics/thumb.jpg ../Release
  # Extras Disc
  mv "$XISONAME" '../Release/Extras Disc'
  cp Documents/{'UDDAE Instructions','Run XISO from HDD'}.txt '../Release/Extras Disc/Documents'
  cp 'Utilites/Xbox/Attacher, Detacher/Extras Disc Attacher.zip' '../Release/Extras Disc/Extras'
  # Variants
  mv 'Quick Update.zip' 'Quick Upgrade.zip' 'XBHDM Build.zip' '../Release/Installer Variants'
  # Tools
  cp Utilites/PC/zipped/* ../Release/Utilites
  if command -v xdg-open &>/dev/null ; then
    xdg-open ../Release
  else
    ls -lah --color ../Release
  fi
}

# MAIN -------------------------------------------------------------------------

# This script using recent bashisms, so make sure to run on newer bash shell.
if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
  prnt_bbrwn 'Use bash version 4.0 or higher to run this script.'
  exit
fi

cd "$OGXSMDIR" || exit

# Checking dependencies.
# rar is not FLOSS so you need to enable non-free (multiverse, or similar) repo.
declare -a DEPS=(rar 7z)
for ((NUM=${#DEPS[@]},i=0; i<NUM;i++)); do
  if command -v "${DEPS[i]}" &>/dev/null ; then
    unset -v "DEPS[i]"
  fi
done

# Exit if dependency not found.
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  prnt_bbrwn 'Package(s) not found'
  prnt_bbrwn 'Install the proper distribution package for your system:'
  printf '   - %s\n' "${DEPS[@]}"
  exit 1
fi

case "$1" in
  -dsv|disc-save)
    build_disc_save
    mssg "Done: Extras Disc/Softmod/softmod files/$ZIPNAME"
  ;;
  -rar|files-rar)
    build_files_rar
    mssg 'Done: Files.rar'
  ;;
  -hdds|hdd-save)
    continue_or_get_prebuild BUILD_HDD_SAVE "$XBSMKIT"
    mssg 'Done: ../Test Build'
  ;;
  -var|installer-variants)
    continue_or_get_prebuild BUILD_INSTALLER_VARIANTS "$INSTVAR"
    mssg 'Done:' \
         '- Quick Update.zip' \
         '- Quick Upgrade.zip' \
         '- XBHDM Build.zip'
  ;;
  -rls|release)
    continue_or_get_prebuild build_release "$XBSMKIT"
    mssg 'Done:' \
         '- ../Release'	\
         "- $UDDAE" \
         "- Extras Disc/Softmod/softmod files/$ZIPNAME"
  ;;
  -rmdb|rm-thumbdb)
    remove_all_thumbdb
  ;;
  -zip|softmod-zip)
    continue_or_get_prebuild BUILD_SOFTMOD_ZIP "$XBSMTZIP"
    mssg 'Done:' \
         "- $ZIPNAME" \
         "- $UDDAE"
  ;;
  -test|test-xiso)
    continue_or_get_prebuild BUILD_TEST_XISO "$EXTRAS"
    mssg 'Done:' \
         "- $XISONAME" \
         "- Extras Disc/Softmod/softmod files/$ZIPNAME"
  ;;
  -skin|update-skin)
    update_skin_version_number
    mssg "Done: $UDDAE"
  ;;
  -xiso)
    continue_or_get_prebuild BUILD_XISO "$EXTRAS"
    mssg 'Done:' \
         "- $XISONAME" \
         "- Extras Disc/Softmod/softmod files/$ZIPNAME"
  ;;
  -xapp|xiso-app)
    continue_or_get_prebuild BUILD_XISO_APPLICATION "$EXTRAS"
    mssg 'Done:' \
         "- ${XISONAME%.*}" \
         "- Extras Disc/Softmod/softmod files/$ZIPNAME"
  ;;
  *)
    print_help
  ;;
esac
